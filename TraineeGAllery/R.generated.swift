//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `testColor`.
    static let testColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "testColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "testColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func testColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.testColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "testColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func testColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.testColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `Roboto-Bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Bold", pathExtension: "ttf")
    /// Resource file `Roboto-Light.ttf`.
    static let robotoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Light", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")

    /// `bundle.url(forResource: "Roboto-Bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Light", withExtension: "ttf")`
    static func robotoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")

    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }

    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }

    static func validate() throws {
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 21 images.
  struct image {
    /// Image `Ellipse`.
    static let ellipse = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse")
    /// Image `Info`.
    static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "Info")
    /// Image `Intersect 1`.
    static let intersect1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Intersect 1")
    /// Image `Intersect`.
    static let intersect = Rswift.ImageResource(bundle: R.hostingBundle, name: "Intersect")
    /// Image `Logo-2`.
    static let logo2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo-2")
    /// Image `birthday`.
    static let birthday = Rswift.ImageResource(bundle: R.hostingBundle, name: "birthday")
    /// Image `cat1`.
    static let cat1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat1")
    /// Image `cat2`.
    static let cat2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat2")
    /// Image `cat3`.
    static let cat3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat3")
    /// Image `cat4`.
    static let cat4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat4")
    /// Image `cat5`.
    static let cat5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat5")
    /// Image `cat6`.
    static let cat6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat6")
    /// Image `email`.
    static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "email")
    /// Image `main`.
    static let main = Rswift.ImageResource(bundle: R.hostingBundle, name: "main")
    /// Image `passwordOff`.
    static let passwordOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "passwordOff")
    /// Image `password`.
    static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "password")
    /// Image `photo`.
    static let photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `warning`.
    static let warning = Rswift.ImageResource(bundle: R.hostingBundle, name: "warning")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse", bundle: ..., traitCollection: ...)`
    static func ellipse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Info", bundle: ..., traitCollection: ...)`
    static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Intersect 1", bundle: ..., traitCollection: ...)`
    static func intersect1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intersect1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Intersect", bundle: ..., traitCollection: ...)`
    static func intersect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intersect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo-2", bundle: ..., traitCollection: ...)`
    static func logo2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "birthday", bundle: ..., traitCollection: ...)`
    static func birthday(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.birthday, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat1", bundle: ..., traitCollection: ...)`
    static func cat1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat2", bundle: ..., traitCollection: ...)`
    static func cat2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat3", bundle: ..., traitCollection: ...)`
    static func cat3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat4", bundle: ..., traitCollection: ...)`
    static func cat4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat5", bundle: ..., traitCollection: ...)`
    static func cat5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat6", bundle: ..., traitCollection: ...)`
    static func cat6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "email", bundle: ..., traitCollection: ...)`
    static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main", bundle: ..., traitCollection: ...)`
    static func main(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
    static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "passwordOff", bundle: ..., traitCollection: ...)`
    static func passwordOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passwordOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "warning", bundle: ..., traitCollection: ...)`
    static func warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.warning, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.applicationStrings` struct is generated, and contains static references to 1 localization keys.
    struct applicationStrings {
      /// Value: New
      static let newTitle = Rswift.StringResource(key: "newTitle", tableName: "ApplicationStrings", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: New
      static func newTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newTitle", tableName: "ApplicationStrings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ApplicationStrings", preferredLanguages: preferredLanguages) else {
          return "newTitle"
        }

        return NSLocalizedString("newTitle", tableName: "ApplicationStrings", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localization` struct is generated, and contains static references to 52 localization keys.
    struct localization {
      /// Value:  
      static let newLine = Rswift.StringResource(key: "newLine", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add
      static let addTitle = Rswift.StringResource(key: "addTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All photos
      static let allPhotos = Rswift.StringResource(key: "allPhotos", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to exit? The entered data will be lost
      static let alertMessageAddData = Rswift.StringResource(key: "alertMessageAddData", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Back
      static let backButtonTitle = Rswift.StringResource(key: "backButtonTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Back
      static let leftBarButtonAddData = Rswift.StringResource(key: "leftBarButtonAddData", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Birthday
      static let birthday = Rswift.StringResource(key: "birthday", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Birthday
      static let settingsBirthday = Rswift.StringResource(key: "settingsBirthday", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let cancelButtonTitle = Rswift.StringResource(key: "cancelButtonTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let cancelTitle = Rswift.StringResource(key: "cancelTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm password
      static let confirmPasswordTitle = Rswift.StringResource(key: "confirmPasswordTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm password *
      static let attributedConfirmPassword = Rswift.StringResource(key: "attributedConfirmPassword", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirmation
      static let alertTitleAddData = Rswift.StringResource(key: "alertTitleAddData", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create an account
      static let createAccountButton = Rswift.StringResource(key: "createAccountButton", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Description
      static let addDataDescriptionText = Rswift.StringResource(key: "addDataDescriptionText", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: E-mail adress
      static let settingsEmailAdress = Rswift.StringResource(key: "settingsEmailAdress", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email
      static let email = Rswift.StringResource(key: "email", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email *
      static let attributedEmail = Rswift.StringResource(key: "attributedEmail", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Exit
      static let alertLeftButton = Rswift.StringResource(key: "alertLeftButton", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fields are empty
      static let emptyFields = Rswift.StringResource(key: "emptyFields", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: I already have an account
      static let haveAccountButton = Rswift.StringResource(key: "haveAccountButton", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid User Name
      static let invalidUserName = Rswift.StringResource(key: "invalidUserName", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid birthday
      static let invalidBirthday = Rswift.StringResource(key: "invalidBirthday", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid e-mail adress
      static let invalidEmail = Rswift.StringResource(key: "invalidEmail", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid intput
      static let invalidInput = Rswift.StringResource(key: "invalidInput", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid password. 1 uppercase, 1 lowercase letter, 1 number
      static let invalidPassword = Rswift.StringResource(key: "invalidPassword", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Name
      static let addDataNameText = Rswift.StringResource(key: "addDataNameText", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New password
      static let newPasswordTitle = Rswift.StringResource(key: "newPasswordTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let nextButtonTitle = Rswift.StringResource(key: "nextButtonTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Old password
      static let oldPasswordTitle = Rswift.StringResource(key: "oldPasswordTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password *
      static let attributedPassword = Rswift.StringResource(key: "attributedPassword", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Passwords don't match
      static let passwordsDontMatch = Rswift.StringResource(key: "passwordsDontMatch", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Personal data
      static let settingsPersonalData = Rswift.StringResource(key: "settingsPersonalData", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please, check the entered data
      static let checkData = Rswift.StringResource(key: "checkData", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      static let saveButtonTitle = Rswift.StringResource(key: "saveButtonTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let search = Rswift.StringResource(key: "search", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select photo:
      static let selectPhoto = Rswift.StringResource(key: "selectPhoto", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign In
      static let signInTitle = Rswift.StringResource(key: "signInTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign Out
      static let signOutButtonTitle = Rswift.StringResource(key: "signOutButtonTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign Up
      static let signUpTitle = Rswift.StringResource(key: "signUpTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: User Name
      static let settingsUserName = Rswift.StringResource(key: "settingsUserName", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: User Name *
      static let attributedUserName = Rswift.StringResource(key: "attributedUserName", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welcome to Gallery!
      static let welcomeText = Rswift.StringResource(key: "welcomeText", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can delete your account
      static let deleteAccountButtonTitle = Rswift.StringResource(key: "deleteAccountButtonTitle", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: addPhoto
      static let addPhotoId = Rswift.StringResource(key: "addPhotoId", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: cell
      static let cellIdMain = Rswift.StringResource(key: "cellIdMain", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: clear
      static let clearReuseId = Rswift.StringResource(key: "clearReuseId", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: id
      static let cellIdAddPhoto = Rswift.StringResource(key: "cellIdAddPhoto", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: indicator
      static let indicatorId = Rswift.StringResource(key: "indicatorId", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: password
      static let password = Rswift.StringResource(key: "password", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: profileCellId
      static let profileCellId = Rswift.StringResource(key: "profileCellId", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: userImages
      static let userImagesID = Rswift.StringResource(key: "userImagesID", tableName: "Localization", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value:  
      static func newLine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newLine", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "newLine"
        }

        return NSLocalizedString("newLine", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Add
      static func addTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "addTitle"
        }

        return NSLocalizedString("addTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: All photos
      static func allPhotos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allPhotos", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "allPhotos"
        }

        return NSLocalizedString("allPhotos", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Are you sure you want to exit? The entered data will be lost
      static func alertMessageAddData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertMessageAddData", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "alertMessageAddData"
        }

        return NSLocalizedString("alertMessageAddData", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Back
      static func backButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backButtonTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "backButtonTitle"
        }

        return NSLocalizedString("backButtonTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Back
      static func leftBarButtonAddData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("leftBarButtonAddData", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "leftBarButtonAddData"
        }

        return NSLocalizedString("leftBarButtonAddData", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Birthday
      static func birthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("birthday", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "birthday"
        }

        return NSLocalizedString("birthday", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Birthday
      static func settingsBirthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsBirthday", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "settingsBirthday"
        }

        return NSLocalizedString("settingsBirthday", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Cancel
      static func cancelButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancelButtonTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cancelButtonTitle"
        }

        return NSLocalizedString("cancelButtonTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Cancel
      static func cancelTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancelTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cancelTitle"
        }

        return NSLocalizedString("cancelTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Confirm password
      static func confirmPasswordTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPasswordTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "confirmPasswordTitle"
        }

        return NSLocalizedString("confirmPasswordTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Confirm password *
      static func attributedConfirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("attributedConfirmPassword", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "attributedConfirmPassword"
        }

        return NSLocalizedString("attributedConfirmPassword", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Confirmation
      static func alertTitleAddData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertTitleAddData", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "alertTitleAddData"
        }

        return NSLocalizedString("alertTitleAddData", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Create an account
      static func createAccountButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("createAccountButton", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "createAccountButton"
        }

        return NSLocalizedString("createAccountButton", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Description
      static func addDataDescriptionText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addDataDescriptionText", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "addDataDescriptionText"
        }

        return NSLocalizedString("addDataDescriptionText", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: E-mail adress
      static func settingsEmailAdress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsEmailAdress", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "settingsEmailAdress"
        }

        return NSLocalizedString("settingsEmailAdress", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Email
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Email *
      static func attributedEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("attributedEmail", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "attributedEmail"
        }

        return NSLocalizedString("attributedEmail", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Exit
      static func alertLeftButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertLeftButton", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "alertLeftButton"
        }

        return NSLocalizedString("alertLeftButton", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Fields are empty
      static func emptyFields(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyFields", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "emptyFields"
        }

        return NSLocalizedString("emptyFields", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: I already have an account
      static func haveAccountButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("haveAccountButton", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "haveAccountButton"
        }

        return NSLocalizedString("haveAccountButton", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Invalid User Name
      static func invalidUserName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalidUserName", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "invalidUserName"
        }

        return NSLocalizedString("invalidUserName", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Invalid birthday
      static func invalidBirthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalidBirthday", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "invalidBirthday"
        }

        return NSLocalizedString("invalidBirthday", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Invalid e-mail adress
      static func invalidEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalidEmail", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "invalidEmail"
        }

        return NSLocalizedString("invalidEmail", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Invalid intput
      static func invalidInput(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalidInput", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "invalidInput"
        }

        return NSLocalizedString("invalidInput", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Invalid password. 1 uppercase, 1 lowercase letter, 1 number
      static func invalidPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalidPassword", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "invalidPassword"
        }

        return NSLocalizedString("invalidPassword", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Name
      static func addDataNameText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addDataNameText", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "addDataNameText"
        }

        return NSLocalizedString("addDataNameText", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: New password
      static func newPasswordTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newPasswordTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "newPasswordTitle"
        }

        return NSLocalizedString("newPasswordTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Next
      static func nextButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nextButtonTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "nextButtonTitle"
        }

        return NSLocalizedString("nextButtonTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Old password
      static func oldPasswordTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oldPasswordTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "oldPasswordTitle"
        }

        return NSLocalizedString("oldPasswordTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Password *
      static func attributedPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("attributedPassword", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "attributedPassword"
        }

        return NSLocalizedString("attributedPassword", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Passwords don't match
      static func passwordsDontMatch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordsDontMatch", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "passwordsDontMatch"
        }

        return NSLocalizedString("passwordsDontMatch", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Personal data
      static func settingsPersonalData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsPersonalData", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "settingsPersonalData"
        }

        return NSLocalizedString("settingsPersonalData", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Please, check the entered data
      static func checkData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("checkData", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "checkData"
        }

        return NSLocalizedString("checkData", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Save
      static func saveButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saveButtonTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "saveButtonTitle"
        }

        return NSLocalizedString("saveButtonTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Search
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "search"
        }

        return NSLocalizedString("search", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Select photo:
      static func selectPhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("selectPhoto", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "selectPhoto"
        }

        return NSLocalizedString("selectPhoto", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Sign In
      static func signInTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signInTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signInTitle"
        }

        return NSLocalizedString("signInTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Sign Out
      static func signOutButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signOutButtonTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signOutButtonTitle"
        }

        return NSLocalizedString("signOutButtonTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Sign Up
      static func signUpTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUpTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signUpTitle"
        }

        return NSLocalizedString("signUpTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: User Name
      static func settingsUserName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsUserName", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "settingsUserName"
        }

        return NSLocalizedString("settingsUserName", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: User Name *
      static func attributedUserName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("attributedUserName", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "attributedUserName"
        }

        return NSLocalizedString("attributedUserName", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: Welcome to Gallery!
      static func welcomeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welcomeText", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "welcomeText"
        }

        return NSLocalizedString("welcomeText", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: You can delete your account
      static func deleteAccountButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deleteAccountButtonTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "deleteAccountButtonTitle"
        }

        return NSLocalizedString("deleteAccountButtonTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: addPhoto
      static func addPhotoId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addPhotoId", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "addPhotoId"
        }

        return NSLocalizedString("addPhotoId", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: cell
      static func cellIdMain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cellIdMain", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cellIdMain"
        }

        return NSLocalizedString("cellIdMain", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: clear
      static func clearReuseId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("clearReuseId", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "clearReuseId"
        }

        return NSLocalizedString("clearReuseId", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: id
      static func cellIdAddPhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cellIdAddPhoto", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "cellIdAddPhoto"
        }

        return NSLocalizedString("cellIdAddPhoto", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: indicator
      static func indicatorId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("indicatorId", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "indicatorId"
        }

        return NSLocalizedString("indicatorId", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: password
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: profileCellId
      static func profileCellId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profileCellId", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "profileCellId"
        }

        return NSLocalizedString("profileCellId", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// Value: userImages
      static func userImagesID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("userImagesID", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "userImagesID"
        }

        return NSLocalizedString("userImagesID", tableName: "Localization", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Intersect 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Intersect 1' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
